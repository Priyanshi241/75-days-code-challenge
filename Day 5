---->Rotate Image

        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

        class Solution {
              public:
                  void rotate(vector<vector<int>>& matrix) {
                        int n=matrix.size();
                        for(int i=0;i<n;i++)
                            for(int j=0;j<i;j++)
                                swap(matrix[i][j],matrix[j][i]);

                        for(int i=0;i<n;i++)
                              reverse(matrix[i].begin(),matrix[i].end());
              }
        };
________________________________________________________________________________________________________________________________________________________________________________
---->Spiral Matrix

      Given an m x n matrix, return all elements of the matrix in spiral order.


        class Solution {
              public:
                  std::vector<int> spiralOrder(std::vector<std::vector<int>>& matrix) {
                                      int n = matrix.size();
                                      int m = matrix[0].size();
                                      std::vector<int> ans;
                                      int left = 0, right = m - 1;
                                      int top = 0, bottom = n - 1;

                                      while (top <= bottom && left <= right) {
                                            for (int i = left; i <= right; i++) {
                                                ans.push_back(matrix[top][i]);
                                             }
                                            top++;
                                            for (int i = top; i <= bottom; i++) {
                                                ans.push_back(matrix[i][right]);
                                             }
                                            right--;

                                           if (top <= bottom) {
                                              for (int i = right; i >= left; i--) {
                                                  ans.push_back(matrix[bottom][i]);
                                              }
                                            }
                                            bottom--;

                                          if (left <= right) {
                                              for (int i = bottom; i >= top; i--) {
                                                    ans.push_back(matrix[i][left]);
                                              }
                                           }
                                          left++;
                                    }
                                    return ans;
                              }
                      };
_____________________________________________________________________________________________________________________________________________________________________________
---->Group Anagrams

      Given an array of strings strs, group the anagrams together. You can return the answer in any order.
      An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


      class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        std::vector<std:: vector<string>> ans;
        std:: unordered_map<string,std::vector<string>>umap;
        
        for(auto x:strs){
            string temp=x;
            sort(x.begin(),x.end());
            umap[x].push_back(temp);
        }

        for(auto x:umap){
            ans.push_back(x.second);
        }

        return ans;
    }
};
_____________________________________________________________________________________________________________________________________________________________________________
---->Remove Duplicates from Sorted List
          Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

      /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL || head->next==NULL)
            return head;
        ListNode* temp=head;
        while(temp->next!=NULL){
            if(temp->val==temp->next->val){
                temp->next=temp->next->next;
            }else
                temp=temp->next;
        }
        return head;
    }
};
_____________________________________________________________________________________________________________________________________________________________________________
