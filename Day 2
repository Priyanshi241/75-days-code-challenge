---->Squares of a Sorted Array (https://leetcode.com/problems/squares-of-a-sorted-array/)

            Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

            class Solution:
                  def sortedSquares(self, nums: List[int]) -> List[int]:
                      for i in range(len(nums)):
                          nums[i]=nums[i]*nums[i]

                      nums.sort()
                      return nums
_______________________________________________________________________________________________________________________________________________________________________________
---->Find Pivot Index (https://leetcode.com/problems/find-pivot-index/)

                Given an array of integers nums, calculate the pivot index of this array.
                The pivot index is the index where the sum of all the numbers strictly to the left of the index is 
                equal to the sum of all the numbers strictly to the index's right.
                If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. 
                This also applies to the right edge of the array.
                Return the leftmost pivot index. If no such index exists, return -1.


                class Solution:
                      def pivotIndex(self, nums: List[int]) -> int:
                          for i in range(len(nums)):
                              left_sum = sum(nums[:i])
                              right_sum = sum(nums[i+1:])
            
                          if left_sum == right_sum:
                              return i
        
                          return -1
___________________________________________________________________________________________________________________________________________________________________________
---->Majority Element(https://leetcode.com/problems/majority-element/)

              Given an array nums of size n, return the majority element.
              The majority element is the element that appears more than ⌊n / 2⌋ times. 
              You may assume that the majority element always exists in the array.

              class Solution:
                    def majorityElement(self, nums: List[int]) -> int:
                        nums.sort()
                        n = len(nums)
                        return nums[n//2]
___________________________________________________________________________________________________________________________________________________________________________
---->Rotate String (https://leetcode.com/problems/rotate-string/)

            Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.
            A shift on s consists of moving the leftmost character of s to the rightmost position.
            For example, if s = "abcde", then it will be "bcdea" after one shift.

            class Solution {
                        public:
                            bool rotateString(string s, string goal) {
                                if(s.length()!=goal.length())
                                    return false;
        
                                if((s+s).find(goal)!= string::npos)
                                    return true;
                                else
                                    return false;
                        }
            };
_____________________________________________________________________________________________________________________________
