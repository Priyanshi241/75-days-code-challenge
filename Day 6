---->4Sum
      Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
            0 <= a, b, c, d < n
            a, b, c, and d are distinct.
            nums[a] + nums[b] + nums[c] + nums[d] == target
            You may return the answer in any order.

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        int n = nums.size();
        if(n < 4) return ans;
        sort(nums.begin(), nums.end());
        for(int i=0;i<n;i++) {
            if(i > 0 && nums[i] == nums[i-1]) continue;
            for(int j=i+1;j<n;j++) {
                if(j > i+1 && nums[j] == nums[j-1]) continue;
                int k = j + 1;
                int l = n - 1;
                while(k < l) {
                    long long sum = nums[i] + nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if(sum == target) {
                        ans.push_back({nums[i], nums[j], nums[k], nums[l]});
                        k++;
                        l--;
                        while(k < l && nums[k] == nums[k-1]) k++;
                        while(k < l && nums[l] == nums[l+1]) l--;
                    } else if(sum < target) {
                        k++;
                    } else l--;
                }
            }
        }
        return ans;
    }
};
______________________________________________________________________________________________________________________________________________________________________________
---->Pairs of Songs With Total Durations Divisible by 60

      You are given a list of songs where the ith song has a duration of time[i] seconds.
      Return the number of pairs of songs for which their total duration in seconds is divisible by 60. 
      Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

      class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        vector<int> v(60,0);
        int ans = 0;
        for(auto &i: time){
            ans += (v[(60-((i)%60))%60]);
            v[((i))%60]++;
        }
        return ans;
    }
};
_____________________________________________________________________________________________________________________________________________________________________________
---->
