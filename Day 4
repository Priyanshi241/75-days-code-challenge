---->Subarray Sum Equals K(https://leetcode.com/problems/subarray-sum-equals-k/)

      Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
      A subarray is a contiguous non-empty sequence of elements within an array.

      class Solution {
              public:
                   int subarraySum(vector<int>& nums, int k) {
                        int count = 0;
                        for (int i = 0; i < nums.size(); i++) {
                            int sum = 0;
                            for (int j = i; j < nums.size(); j++) {
                                sum += nums[j];
                                      if (sum == k) {
                                          count++;
                                      }
                            }
                      }
                      return count;
                }
        };
________________________________________________________________________________________________________________________________________________________________________________
---->Sort Colors (https://leetcode.com/problems/sort-colors/)

      Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent,
      with the colors in the order red, white, and blue.
      We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
      You must solve this problem without using the library's sort function.

        class Solution {
              public:
                  void sortColors(vector<int>& nums) {
                        sort(nums.begin(),nums.end());
                  }
        };
______________________________________________________________________________________________________________________________________________________________________________
---->Remove Element(https://leetcode.com/problems/remove-element/)

      Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. 
      The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
      Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
      Change the array nums such that the first k elements of nums contain the elements which are not equal to val. 
      The remaining elements of nums are not important as well as the size of nums.
      Return k.

      class Solution {
            public:
                int removeElement(vector<int>& nums, int val) {
                    std::vector<int>new1;
                    for(int i=0;i<nums.size();i++){
                        if(nums[i]!=val){
                            new1.push_back(nums[i]);
                        }
                    }
                    nums=new1;
                    return nums.size();
              }
      };
____________________________________________________________________________________________________________________________________________________________________________
---->First Unique Character in a String()

      Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

      class Solution {
            public:
              int firstUniqChar(string s) {
                    std::unordered_map<char,int>mp;
                    for(int i=0;i<s.length();i++){
                        mp[s[i]]++;
                    }
                    for(int i=0;i<s.size();i++){
                        if(mp[s[i]]==1)
                        return i;
                    }
                    return -1;
              }
    };
______________________________________________________________________________________________________________________________________________________________________________
